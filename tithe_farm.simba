{$IFNDEF SCRIPT_CHAIN}
{$IFDEF WINDOWS}
{$DEFINE SCRIPT_GUI}
{$ENDIF}
{$I SRL/osr.simba}
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex := 0;
  AntibanEnabled := False;
  //Enables Most Antiban
  BreaksEnabled := False;
  //Enables Short Breaks
  SleepEnabled := False;
  //Enables Sleep Breaks
  RemoteInputEnabled := True;
  //Enables Remote Input
  ProgressReportEnabled := True;
  //Enables Graphical Progress Report
  ScriptDebugEnabled := True;
  //Enables Script Debugging
  BioHashOverride := 0.925038927915748
end;
{$ENDIF}

type
  ESeed = (GOLOVANOVA, BOLOGANO, LOGAVANO);

var
  CurrentSeed = ESeed.GOLOVANOVA;

const
  PlantCount := 0;
  HOPIFOCCUPIED = True;
  HOPONCHAT = True;
  WORLDLIST = [313 .. 315, 329 .. 332, 337 .. 339, 346 .. 348, 354 .. 357, 362, 374, 377, 378, 386, 421, 422, 443 .. 446, 477 .. 482, 484 .. 496];

  PlanterArray: TPointArray := [[2636, 2406], [2656, 2406], [2656, 2418], [2636, 2418]
  //, [2636, 2432]
  //, [2656, 2432]
  //, [2656, 2442], [2636, 2442]
  //, [2636, 2467], [2656, 2467]
  //, [2656, 2478], [2636, 2478]
  //, [2636, 2492], [2656, 2492]
  ];
  WateringCans := 23;

type
  EFarmerState = (WAIT_STATE, WALK_SPOT, PLANT_SEED, WATER_SEED, CLEAR_SEED, HARVEST_SEED, GET_WATER, GAMEFINISHED, LEVEL_UP, CLOSE_CONTEXT, END_SCRIPT);
  TTitheFarmer = record
     (TBaseWalkerScript) State: EFarmerState;
    Patches: TRSObject;
    WalkLocations: TRSObject;
    Worlds: TIntegerArray;
    walkSpot: Int32;
    SeedItem: TRSItem;
    SeedPlanted: Boolean;
  end;

procedure TAntiban.Setup; override;
begin
  inherited;
  Antiban.Skills := [ERSSkill.FARMING, ERSSkill.TOTAL];
  Antiban.MinZoom := 0;
  Antiban.MaxZoom := 30;
end;

procedure TTitheFarmer.SetupObjects;
begin
  RSW.Setup('x2493y2310');
  Patches.SetupCommon();
  Patches.UpText := [];
  Patches.Finder.Colors += CTS2(3035994, 11, 0.05, 0.19);
  Patches.SetupCommon(4, PlanterArray);
  case CurrentSeed of
    ESeed.BOLOGANO: SeedItem := 'Bologano seed';
    ESeed.GOLOVANOVA: SeedItem := 'Golovanova seed';
    ESeed.LOGAVANO: SeedItem := 'Logavano seed';
  end;
  walkSpot := 0;
  SeedPlanted := False;
end;

function TTitheFarmer.IsLastStep(): Boolean;
begin
  Result := ((self.walkSpot) = (High(PlanterArray)));
end;

function TTitheFarmer.GetSeedString(): String;
begin
  if CurrentSeed = ESeed.BOLOGANO then
  begin
    Result := 'Bologano seed';
  end
  else if CurrentSeed = ESeed.GOLOVANOVA then
  begin
    Result := 'Golovanova seed';
  end
  else if CurrentSeed = ESeed.LOGAVANO then
  begin
    Result := 'Logavano seed';
  end
end;

function TTitheFarmer.PlantSeed(): Boolean;
var
  MSPnt: TPoint := RSW.GetTileMS (PlanterArray[self.walkSpot]).Mean;
  p: TPoint;
begin
  if (Inventory.CountItem(self.GetSeedString()) = 0) then
  begin
    if self.IsLastStep() then
    begin
      self.walkSpot := 0;
      RSW.WebWalk([2646, 2406 ]);
    end
    else
    begin
      self.walkSpot += 1;
    end
  end
  else
  begin
    waitUntil(Inventory.ClickItem(self.GetSeedString()), 100, 300);
    if (not (Inventory.GetSelectedSlot >= 0)) then
    begin
      waitUntil(Inventory.ClickItem(self.GetSeedString()), 100, 300);
    end;
    Mouse.Move(MSPnt);
    Mouse.Click(MOUSE_LEFT);

    wait(400, 500);
    Result := WaitUntil(self.CheckPlant(MSPnt), 200, 2000);
    Self.Fertilizer()
  end
end;

function TTitheFarmer.Fertilizer(): Boolean;
var
  MSPnt: TPoint := RSW.GetTileMS (PlanterArray[self.walkSpot]).Mean;
begin
  waitUntil(Inventory.ClickItem("Gricoller's fertiliser"), 100, 300);
  if (not (Inventory.GetSelectedSlot >= 0)) then
  begin
    waitUntil(Inventory.ClickItem("Gricoller's fertiliser"), 100, 300);
  end;
  wait(200, 300);
  Mouse.Move(MSPnt);
  Mouse.Click(MOUSE_LEFT);
  wait(2000, 3000);
end;

function TTitheFarmer.WaterSeed(): Boolean;
var
  MSPnt: TPoint := RSW.GetTileMS (PlanterArray[self.walkSpot]).Mean;
begin
  Mouse.Move(MSPnt);
  Mouse.Click(MOUSE_LEFT);
  if not RSW.AtTile(PlanterArray[self.walkSpot], 8) then
  begin
    wait(250, 300);
    Minimap.WaitMoving();
    Mouse.Move(MSPnt);
    Mouse.Click(MOUSE_LEFT);
  end
  wait(250, 300);
  Result := WaitUntil(self.checkWater(MSPnt), 200, 3000);
  self.SeedPlanted := False;
  if self.IsLastStep() then
  begin
    self.walkSpot := 0;
    RSW.WebWalk([2646, 2406 ]);
  end
  else
  begin
    self.walkSpot += 1;
  end
  Result := True;
end;

function TTitheFarmer.EndGame(): Boolean;
begin
  RSW.WebWalk([2628, 2451]);
  wait(500, 1000);
  //deposit sack
  Mouse.Move(RSW.GetTileMS([2628, 2451]));
  Mouse.Click(MOUSE_LEFT);
  wait(500, 1000);
  //walk to door
  RSW.WebWalk([2613, 2455]);
  Minimap.SetCompassAngle(270);
  Mouse.Move(RSW.GetTileMS([2612, 2455]));
  Mouse.Click(MOUSE_LEFT);


  Result := WaitUntil(self.OutsideFarm(), 200, 2000);
  wait(2000, 3000);
  self.RestartGame();
end

function TTitheFarmer.RestartGame(): Boolean;
begin
  if (Inventory.CountItem(self.GetSeedString) = 0) then
  begin
    Mouse.Move(RSW.GetTileMS([2600, 2444]));
    wait(2000, 3000);
    Mouse.Click(MOUSE_LEFT);
    wait(2000, 3000);
    if ((self.GetSeedString() = 'Bologano seed') or (self.GetSeedString() = 'Golovanova seed') or (self.GetSeedString() = 'Logavano seed')) then
    begin
      wait(2000, 3000);
      Chat.ClickOption(self.GetSeedString());
      wait(2000, 3000);
    end
  end
  Minimap.SetCompassAngle(90);
  wait(2000, 3000);
  Mouse.Move(RSW.GetTileMS([2610, 2455]));
  wait(2000, 3000);
  Mouse.Click(MOUSE_LEFT);
  wait(2000, 3000);
  wait(2000, 3000);
  self.walkSpot := 0;
  RSW.WebWalk([2646, 2406 ]);
  Minimap.WaitMoving();
end

function TTitheFarmer.HasEmptyWateringCan(): Boolean;
begin
  Result := Inventory.ContainsItem('Watering can');
end;

function TTitheFarmer.GetWater(): Boolean;
begin
  RSW.WebWalk([2670, 2394]);
  Inventory.Open;
  Inventory.SetSelectedItem('Watering can');
  Minimap.WaitMoving();
  Minimap.SetCompassAngle(0);
  Mouse.Move(RSW.GetTileMS([2676, 2394]));
  Mouse.Click(MOUSE_LEFT);
  Result := WaitUntil(not (Self.HasEmptyWateringCan()), 200, 60000);
  Minimap.SetCompassAngle(135);
  self.LoopClick();
end;

function TTitheFarmer.InFarm(): Boolean;
begin
  Result := RSW.GetMyPos.X >= 2612;
end;

function TTitheFarmer.OutsideFarm(): Boolean;
begin
  Result := RSW.GetMyPos.X <= 2610;
end;

function TRSLogout.GetCurrentWorld: Int32;
begin
  if (not Self.IsWorldSwitcherOpen()) then
  begin
    Self.Open();
    if Self.GetButton(ERSLogoutButton.WORLD_SWITCHER).Click then
      WaitUntil(Self.IsWorldSwitcherOpen(), 500, 6000);
  end;
  Result := OCR.RecognizeNumber([Self.Bounds.X1 + 17, Self.Bounds.Y1, Self.Bounds.X1 + 150, Self.Bounds.Y1 + 20], TOCRColorRule.Create([2070783]), RS_FONT_BOLD_12);
end;

function TRSLogout.SwitchWorlds(World: Int32): Boolean;
var
  B: TBox;
  Found, Down: Boolean;
  ListBox: TBox := [Self.Bounds.X1 + 17, Self.Bounds.Y1 + 36, Self.Bounds.X1 + 42, Self.Bounds.Y2 - 38];
  VisibleWorld: Int32;
begin
  if (Self.GetCurrentWorld = World) then
    Exit(True);
  // Read the first visible members world from the world list
  VisibleWorld := OCR.RecognizeNumber(ListBox, TOCRColorRule.Create([61680, 14737632]), RS_FONT_PLAIN_12);
  Mouse.Move(Self.Bounds.Expand(- 5, - 36), True);
  while InRange(Self.GetScrollPosition, 1, 99) do
  begin
    if OCR.LocateText(ListBox, ToStr(World), RS_FONT_PLAIN_12, TOCRColorRule.Create([61680, 14737632]), B) = 1 then
    begin
      Found := True;
      Break;
    end;
    if World > VisibleWorld then
    begin
      Mouse.Scroll(SRL.NormalRange(1, 3), True);
      Down := True;
    end
    else if World <= VisibleWorld then
    begin
      Mouse.Scroll(SRL.NormalRange(1, 3), False);
      Down := False;
    end;
  end;
  if (not Found) then
    if Down then
    begin
      while Self.GetScrollPosition >= 1 do
      begin
        if OCR.LocateText(ListBox, ToStr(World), RS_FONT_PLAIN_12, TOCRColorRule.Create([61680, 14737632]), B) = 1 then
        begin
          Found := True;
          Break;
        end;
        Mouse.Scroll(SRL.NormalRange(1, 3), False);
      end;
    end
  else
  begin
    while Self.GetScrollPosition <= 99 do
    begin
      if OCR.LocateText(ListBox, ToStr(World), RS_FONT_PLAIN_12, TOCRColorRule.Create([61680, 14737632]), B) = 1 then
      begin
        Found := True;
        Break;
      end;
      Mouse.Scroll(SRL.NormalRange(1, 3), True);
    end;
  end;
  Result := Found;
  if Result then
  begin
    Mouse.Click(B, MOUSE_LEFT);
    WaitUntil((Self.GetCurrentWorld = World), 75, 15000);
  end;
end;

function TTitheFarmer.HopWorlds(): Boolean;
var
  World: Int32;
begin
  repeat
    World := WORLDLIST[Random(0, Length(WORLDLIST) - 1)];
    if InIntArray(Self.Worlds, World) then
      Continue;
    Self.Worlds += World;
    if Self.Worlds.Len() >= Length(WORLDLIST) then
      // Hopped into every world on our list, so reset local worldlist Self.Worlds := [];
  until (World > 0);
  writeln('Hopping to world ' + ToStr(World));
  Result := Logout.SwitchWorlds(World);
end;

procedure TTitheFarmer.CheckForPlayers();
var
  Dots: TPointArray := Minimap.GetDots (ERSMinimapDot.PLAYER);
begin
  writeln(Minimap.GetDots(ERSMinimapDot.PLAYER));
  if Length(Dots) < 1 then
    Exit;
  FilterPointsDist(Dots, 0, 12000, Minimap.Center.X, Minimap.Center.Y);
  if Length(Dots) < 1 then
    Exit;
  if HOPIFOCCUPIED then
  begin
    Writeln('Player(s) detected nearby, hopping worlds...');
    if (not Self.HopWorlds()) then
    begin
      Logout.ClickLogout();
      TerminateScript('Failed to hop worlds');
    end;
    Exit;
  end;
  if HOPONCHAT then
  begin
    if (Pos(':', Chat.GetMessage(7, [CHAT_COLOR_BLACK, CHAT_COLOR_BLUE])) > 0) or (Pos(':', Chat.GetMessage(6, [CHAT_COLOR_BLACK, CHAT_COLOR_BLUE])) > 0) then
    begin
      if OCR.Recognize(Box(Mainscreen.Center, 200, 200), TOCRColorRule.Create([65535, 5]), RS_FONT_BOLD_12) <> '' then
      begin
        Writeln('Player chat detected nearby, hopping worlds...');
        if (not Self.HopWorlds()) then
        begin
          Logout.ClickLogout();
          TerminateScript('Failed to hop worlds');
        end;
      end;
    end;
  end;
end;

function TTitheFarmer.LoopClick(): Boolean;
var
  I: Int32;
begin
  for I := 0 to High(PlanterArray) do
  begin
    Mouse.Move(RSW.GetTileMS(PlanterArray[I]).Mean);
    if MainScreen.IsUpText(['Water'], 50) or MainScreen.IsUpText(['Clear'], 50) or MainScreen.IsUpText(['Harvest'], 50) then
    begin
      Mouse.Click(MOUSE_LEFT);
      Minimap.WaitMoving();
      wait(1500, 2000);
    end
  end
  Result := True;
end

function TTitheFarmer.checkPlants(): Boolean;
var
  I: Int32;
  MSPnt: TPoint := RSW.GetTileMS (PlanterArray[self.walkSpot]).Mean;
begin
  for I := 0 to High(PlanterArray) do
  begin
    Mouse.Move(MSPnt);
    if (self.checkPlant(MSPnt) or self.checkWater(MSPnt)) then
    begin
      Result := True;
    end
  end
  if(not(Result)) then
  begin
    result := False;
  end
end

function TTitheFarmer.ClearSeed(): Boolean;
var
  MSPnt: TPoint := RSW.GetTileMS (PlanterArray[self.walkSpot]).Mean;
begin
  Mouse.Move(MSPnt);
  Mouse.Click(MOUSE_LEFT);
  minimap.WaitMoving();
  wait(800, 1000);
  if self.IsLastStep() then
  begin
    self.walkSpot := 0;
    RSW.WebWalk([2646, 2406 ]);
  end
  else
  begin
    self.walkSpot += 1;
  end
  Result := True;
end;

function TTitheFarmer.WaitState(): Boolean;
begin
  if self.IsLastStep() then
  begin
    self.walkSpot := 0;
  end
  else
  begin
    self.walkSpot += 1;
  end
  Result := True;
end;

function TTitheFarmer.WalkToSpot(): Boolean;
begin
  Result := RSW.WebWalk(PlanterArray[self.walkSpot]);
  self.SeedPlanted := False;
end;

function TTitheFarmer.checkPlant(point: TPoint): Boolean;
var
  B: TBox;
begin
  B := Box(point, 5, 5);
  //10 pixels height and width
  if (self.GetSeedString() = 'Bologano seed') then
  begin
    Result := SRL.CountColor(CTS2(4029839, 15, 0.67, 0.18), B) >= 1
  end
  else if (self.GetSeedString() = 'Golovanova seed') then
  begin
    Result := SRL.CountColor(CTS2(4029839, 15, 0.67, 0.18), B) >= 1
  end
  else if (self.GetSeedString() = 'Logavano seed') then
  begin
    Result := SRL.CountColor(CTS2(4029839, 15, 0.67, 0.18), B) >= 1
  end
  else
  begin
    Result := False;
  end
end;

function TTitheFarmer.checkWater(point: TPoint): Boolean;
var
  B: TBox;
begin
  B := Box(point, 10, 10);
  //10 pixels height and width
  Result := SRL.CountColor(CTS2(5797500, 1, 0.01, 0.01), B) >= 10
end;

procedure TTitheFarmer.Init(MaxActions: Int32; MaxTime: Int64); override;
begin
  Name := 'Tithe farmer';
  inherited;
  RSW.Setup('zeah_tithe');
  Self.SetupObjects;
  if not RSClient.IsLoggedIn then
    Login.LoginPlayer;
  if Antiban.BioDice() then
    Options.SetNPCAttackOption(ERSAttackOption.HIDDEN)
  else
    Options.SetNPCAttackOption(ERSAttackOption.ALWAYS_RIGHT_CLICK);
  if ScriptDebugEnabled then
  begin
    DebugObjectArray += @ Patches;
    DebugObjectArray += @ WalkLocations;
  end;
  wait(500, 1000);
  if (self.OutsideFarm()) then
  begin
    writeln("restartgame");
    self.RestartGame();
  end

  if (HOPONCHAT or HOPIFOCCUPIED) then
  begin

      wait(500, 1000);
      RSW.WebWalk([2665, 2452]);
      wait(500, 1000);
      Self.CheckForPlayers();

  end
  wait(500, 1000);
  if Self.HasEmptyWateringCan() then
    Self.GetWater();
end;

function TTitheFarmer.GetState: EFarmerState;
var
  MSPnt: TPoint := RSW.GetTileMS (PlanterArray[self.walkSpot]).Mean;
begin

  if (Inventory.CountItem(self.GetSeedString) = 0) and (not(self.checkPlants())) then
  begin
    Exit(EFarmerState.GAMEFINISHED);
  end
  if (Inventory.CountItem('Watering can') >= (WateringCans * 0.7)) then
  begin
    Exit(EFarmerState.GET_WATER);
  end
  else
  begin
    Mouse.Move(MSPnt);
    wait(20, 50);
    if MainScreen.IsUpText(['Walk here'], 50) and checkWater(MSPnt) and checkPlant(MSPnt) then
    begin
      writeln("waitstate?");
      Exit(EFarmerState.WAIT_STATE);
    end
    else if MainScreen.IsUpText(['Walk here'], 50) and not (checkWater(MSPnt)) and not checkPlant(MSPnt) then
    begin
      Exit(EFarmerState.PLANT_SEED);
    end
    if MainScreen.IsUpText(['Water'], 50) then
    begin
      Exit(EFarmerState.WATER_SEED);
    end
    else if MainScreen.IsUpText(['Clear'], 50) then
    begin
      Exit(EFarmerState.CLEAR_SEED);
    end
    else if MainScreen.IsUpText(['Harvest'], 50) then
    begin
      Exit(EFarmerState.HARVEST_SEED);
    end
    else
    begin
    writeln(checkWater(MSPnt));
    writeln(checkPlant(MSPnt));
      writeln("elsewaitstate");
    end
  end;
  if Chat.LeveledUp() then
  begin
    Exit(EFarmerState.LEVEL_UP);
  end;
end;

procedure TTitheFarmer.Run(MaxActions: Int32; MaxTime: Int64);
begin
  Self.Init(MaxActions, MaxTime);
  self.WalkToSpot();
  repeat
    State := Self.GetState;
    Action := ToStr(State);
    Self.ProcessWhileWaiting;
    case State of
      EFarmerState.WAIT_STATE: self.WaitState();
      EFarmerState.WALK_SPOT: self.WalkToSpot();
      EFarmerState.PLANT_SEED: self.PlantSeed();
      EFarmerState.WATER_SEED: self.WaterSeed();
      EFarmerState.CLEAR_SEED: self.ClearSeed();
      EFarmerState.HARVEST_SEED: self.ClearSeed();
      EFarmerState.GET_WATER: self.GetWater();
      EFarmerState.GAMEFINISHED: self.EndGame();
      EFarmerState.LEVEL_UP: Chat.HandleLevelUp;
      EFarmerState.END_SCRIPT: Break;
    end;
    Self.DoAntiban;
  until Self.ShouldStop;
end;

var
  TitheFarmer: TTitheFarmer;

type
  TTitheFarmerConfig = record
     (TScriptConfig) SeedTypeSelector: TLabeledCombobox;
  end;

procedure TTitheFarmerConfig.StartScript(Sender: TObject);
begin
  Self.Init(Sender);
  CurrentSeed := ESeed(SeedTypeSelector.GetItemIndex);
end;

procedure TTitheFarmerConfig.Setup; override;
begin
  inherited;
  with SeedTypeSelector do
  begin
    Init(ScriptSettingsPanel);
    SetCaption('Seed type:');
    SetLeft(ScriptSettingsLabel.getLeft + 5);
    SetTop(ScriptSettingsLabel.getTop + ScriptSettingsLabel.getHeight);
    SetWidth(200);
    SetStyle(csDropDownList);
    AddItem('Golovanova seedling');
    AddItem('Bologano seedling');
    AddItem('Logavano seedling');
    SetItemIndex(Ord(CurrentSeed));
  end;
  StartButton.setOnClick(@ Self.StartScript);
end;

procedure TTitheFarmerConfig.Run; override;
begin
  Self.Setup;
  inherited;
end;

var
  TitheFarmerConfig: TTitheFarmerConfig;
{$IFNDEF SCRIPT_CHAIN}
begin
{$IFDEF SCRIPT_GUI}
  Sync(@ TitheFarmerConfig.Run);
{$ENDIF}
  TitheFarmer.Run(MaxActions, MaxTime);
end;
{$ENDIF}
